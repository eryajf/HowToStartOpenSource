import{_ as n,o as a,c as e,e as i}from"./app-6e4b3321.js";const t={};function l(p,s){return a(),e("div",null,s[0]||(s[0]=[i(`<p>如果你是项目的负责人，在后期项目维护中，同样不建议直接使用本地 push 的方式进行，尽管我们有这个项目的全部权限，也可能会因为某次失手，导致将不符合预期的内容提交。这里建议走 pr 的方式进行维护，便于在 merge 的时候二次核验一下代码差异。</p><p>接下来是一个维护的常规流程。</p><p>拉取代码到本地：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone git@github.com:eryajf/learn-github.git

$ <span class="token builtin class-name">cd</span> learn-github

$ <span class="token function">cat</span> README.md
<span class="token comment"># learn-github</span>
学习GitHub相关交互以及功能
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时项目所在分支为默认的 main 分支，我们从最新代码切到一个测试分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token builtin class-name">test</span>

<span class="token comment"># 模拟如下修改</span>
$ <span class="token builtin class-name">echo</span> <span class="token string">&#39;模拟修改提交&#39;</span> <span class="token operator">&gt;&gt;</span> README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将 test 分支提交到远程。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;test&#39;</span>
$ <span class="token function">git</span> push --set-upstream origin <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们来到 GitHub 项目页，可以看到 test 分支：</p><p><img src="https://cdn.jsdelivr.net/gh/eryajf/tu/img/image_20220718_171427.png" alt="image_20220718_171427"></p><p>可以看到页面已经提示 test 分支，并有一个提交 PR 的按钮，我们来创建这个 PR：</p><p><img src="https://cdn.jsdelivr.net/gh/eryajf/tu/img/image_20220718_171438.png" alt="image_20220718_171438"></p><p>通常点击 1 的 tab 进行交互，2 号可以选择当前项目的不同分支，我们这里选择刚刚的 test 分支。</p><p>编号 3 表示可以选择其他远程仓库进行合并，通常是与一个 fork 后的仓库进行交互。编号 4 可以清晰看到当前这次合并与源分支的差异。</p><p>点击创建 PR：</p><p><img src="https://cdn.jsdelivr.net/gh/eryajf/tu/img/image_20220718_171449.png" alt="image_20220718_171449"></p><p>通常我们应该在这一步写明一个标题，以及当次将要合并的内容纲要。</p><p><img src="https://cdn.jsdelivr.net/gh/eryajf/tu/img/image_20220718_171458.png" alt="image_20220718_171458"></p><p>此时视角切回到项目主维护者，可以通过编号 1 和编号 2 来核对提交的次数以及差异内容，这里因为是从本地推送，所以通常直接二次 check 即可，如果是处理别人的 PR，则应该将代码拉到本地进行一些功能测验。</p><p>编号 3 表示将这次 PR 进行合并，所有的提交都会合并到 main 分支中，如果该次 PR 有多次 commit，主分支也会呈现多次 commit 的历史。</p><p>编号 4 表示将多次 commit 压缩成 1 次，然后再合并到主分支，一般与协助者协同维护项目的时候，应该选择第二项。</p><p>当我们确认之后，就完成了一次自己面对项目的迭代推进流程。</p>`,22)]))}const r=n(t,[["render",l],["__file","02-personal-maintenance-process.html.vue"]]);export{r as default};
