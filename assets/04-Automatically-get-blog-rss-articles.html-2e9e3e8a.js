import{_ as l,r as o,o as p,c as i,a as s,b as a,d as t,e as r}from"./app-6e4b3321.js";const u={},c={href:"https://github.com/gautamkrishnar/blog-post-workflow",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/eryajf/read-list",target:"_blank",rel:"noopener noreferrer"};function k(m,n){const e=o("ExternalLinkIcon");return p(),i("div",null,[n[5]||(n[5]=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1)),n[6]||(n[6]=s("p",null,"在 GitHub 中，我们能看到每个人都在折腾个人同名仓库的 profile，我在这上边也花了不少的时间，在这个冲浪经历中，感觉外国人折腾的好像要更厉害一些，浏览过程中看到有人能直接在个人的 profile 中生成博客最近更新文章，很是新颖，于是就学习了一下。",-1)),n[7]||(n[7]=s("p",null,"本文就来讲一下，如何借助 Github Actions 自动获取博客 rss 文章并呈现在 profile 中。",-1)),n[8]||(n[8]=s("h2",{id:"配置",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#配置","aria-hidden":"true"},"#"),a(" 配置")],-1)),s("p",null,[n[1]||(n[1]=a("所用 Actions： ")),s("a",c,[n[0]||(n[0]=a("blog-post-workflow")),t(e)])]),n[9]||(n[9]=r(`<p>使用配置其实非常简单，基本上阅读完官方介绍文档就可以上手使用了，这里说一两个需要注意的地方。</p><p>首先添加 Actions 配置文件，e.g. <code>.github/workflows/blog-rss.yml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Latest blog post workflow
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">schedule</span><span class="token punctuation">:</span> <span class="token comment"># Run workflow automatically</span>
    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span> <span class="token string">&quot;0 * * * *&quot;</span> <span class="token comment"># Runs every hour, on the hour</span>
  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span> <span class="token comment"># Run workflow manually (without waiting for the cron to be called), through the Github Actions Workflow page directly</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">update-readme-with-blog</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> Update this repo&#39;s README with latest blog posts
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Pull in eryajf posts
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> gautamkrishnar/blog<span class="token punctuation">-</span>post<span class="token punctuation">-</span>workflow@v1
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">max_post_count</span><span class="token punctuation">:</span> <span class="token number">6</span>
          <span class="token key atrule">committer_username</span><span class="token punctuation">:</span> <span class="token string">&quot;eryajf&quot;</span>
          <span class="token key atrule">committer_email</span><span class="token punctuation">:</span> <span class="token string">&quot;eryajf@163.com&quot;</span>
          <span class="token key atrule">feed_list</span><span class="token punctuation">:</span> <span class="token string">&quot;https://wiki.eryajf.net/rss.xml&quot;</span>
          <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token string">&quot;$newline- $randomEmoji(💯,🔥,💫,🚀,🌮,📝,🥳,💻,🧰,🏊,🥰,🧐,🤓,😎,🥸,🤩,🤗,🤔,🫣,🤭,🤠,👹,👺,🤡,🤖,🎃,😺,🫶,👍,💪,💄,👀,🧠,🧑‍🏫,👨‍🏫,💂,🧑‍💻,🥷,💃,🕴,💼,🎓,🐻,🐵,🙉,🦄,🦆,🦅,🦍,🦣,🐘,🦒,🦏,🐎,🦩,🐲,🌝,🌜,🌏,🌈,🌊,🎬,🎭,🚀,🚦,⛽️,🗽,🎡,🌋,🌁,💡,🕯,🪜,🧰,⚗️,🔭,🪄,🎊,🎉,) [$title]($url) $newline&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很多配置见名知意，对照官方文档也都能找到答案，这里就不多赘述。</p><p>在内容将要写入的地方配置如下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span><span class="token operator">!</span>-- BLOG-POST-LIST:START --<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span>-- BLOG-POST-LIST:END --<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>脚本会每个小时运行一次，自动将获取到的内容写入到两段注释中间。</p><p>生成内容效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/eryajf/tu/img/image_20220718_172600.png" alt="image_20220718_172600"></p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><p>接下来讲几个注意点，以备扩展该工具时使用。</p><h3 id="一次订阅多个" tabindex="-1"><a class="header-anchor" href="#一次订阅多个" aria-hidden="true">#</a> 一次订阅多个</h3><p>如果你有多个内容源需要订阅，则可以在 Actions 中添加如下标识：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Pull in eryajf posts
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> gautamkrishnar/blog<span class="token punctuation">-</span>post<span class="token punctuation">-</span>workflow@v1
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">max_post_count</span><span class="token punctuation">:</span> <span class="token number">6</span>
          <span class="token key atrule">comment_tag_name</span><span class="token punctuation">:</span> <span class="token string">&quot;eryajf&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 README 中则需要添加如下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span><span class="token operator">!</span>-- eryajf:START --<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span>-- eryajf:END --<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>comment_tag_name</code>将与写入到 README 中的 tag 对应，就能实现多个源写入到同一个文件内了。</p>`,17)),s("p",null,[n[3]||(n[3]=a("正是借助这个能力，我创建了一个 ")),s("a",d,[n[2]||(n[2]=a("read-list")),t(e)]),n[4]||(n[4]=a(" 的项目。"))]),n[10]||(n[10]=s("p",null,"其他的就不多说了，基本上参照我的内容，配合官方文档都可以自己玩起来了。",-1))])}const b=l(u,[["render",k],["__file","04-Automatically-get-blog-rss-articles.html.vue"]]);export{b as default};
