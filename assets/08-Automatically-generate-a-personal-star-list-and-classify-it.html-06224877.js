import{_ as o,r as i,o as l,c as p,a as s,b as a,d as t,e as r}from"./app-6e4b3321.js";const u={},c={href:"https://github.com/eryajf/awesome-stars-eryajf",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/simonecorsi/mawesome",target:"_blank",rel:"noopener noreferrer"},k={href:"https://wiki.eryajf.net/pages/47a507/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/simonecorsi/mawesome/blob/main/TEMPLATE.ejs",target:"_blank",rel:"noopener noreferrer"};function f(v,n){const e=i("ExternalLinkIcon");return l(),p("div",null,[n[9]||(n[9]=s("h2",{id:"preface",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#preface","aria-hidden":"true"},"#"),a(" Preface")],-1)),n[10]||(n[10]=s("p",null,"When we surf GitHub, we often like great projects, but as the joke is often said on the Internet: favorites equal. In fact, we should not let these projects that have been appreciated by ourselves sink into the sea, so it would be nice if there was a project that could automatically organize and categorize its past star projects.",-1)),n[11]||(n[11]=s("p",null,"This article will introduce how to use GitHub Actions to achieve this feature.",-1)),n[12]||(n[12]=s("h2",{id:"show",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#show","aria-hidden":"true"},"#"),a(" Show")],-1)),s("p",null,[n[1]||(n[1]=a("I have created a repository of my personal star list through this scheme：")),s("a",c,[n[0]||(n[0]=a("awesome-stars-eryajf")),t(e)])]),n[13]||(n[13]=s("h2",{id:"disposition",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#disposition","aria-hidden":"true"},"#"),a(" Disposition")],-1)),n[14]||(n[14]=s("p",null,"Used Actions。",-1)),s("ul",null,[s("li",null,[s("a",d,[n[2]||(n[2]=a("mawesome")),t(e)])])]),n[15]||(n[15]=r(`<p>Using the configuration is actually very simple, basically after reading the official introduction document, you can get started.</p><p>Add an Actions profile，e.g. <code>.github/workflows/star-list.yml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Update awesome list

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span>
  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span> <span class="token string">&#39;0 0 * * *&#39;</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Awesome generator
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> simonecorsi/mawesome@v2
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">api-token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">github-email</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.USER_EMAIL <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">template-path</span><span class="token punctuation">:</span> <span class="token string">&quot;/template/README.ejs&quot;</span>
          <span class="token key atrule">github-name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> github.repository_owner <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The configuration items are also relatively simple, do not repeat too much, adjust according to your actual situation.</p>`,4)),s("p",null,[n[4]||(n[4]=s("code",null,"ACCESS_TOKEN",-1)),n[5]||(n[5]=a(" and other confidential information are used in the configuration file, and my article describes how to generate and configure it in detail, which can be directly referenced： ")),s("a",k,[n[3]||(n[3]=a("https://wiki.eryajf.net/pages/47a507/")),t(e)])]),s("p",null,[n[7]||(n[7]=a("By default, one is loaded when the project runs")),s("a",m,[n[6]||(n[6]=a("The default template")),t(e)]),n[8]||(n[8]=a(" to parse into a README file, if you have different needs, you can customize it yourself."))])])}const h=o(u,[["render",f],["__file","08-Automatically-generate-a-personal-star-list-and-classify-it.html.vue"]]);export{h as default};
