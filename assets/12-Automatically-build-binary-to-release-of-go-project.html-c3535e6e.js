import{_ as o,r,o as i,c as u,a as n,b as e,d as l,e as a}from"./app-6e4b3321.js";const p={},d={href:"https://github.com/eryajf/chatgpt-dingtalk",target:"_blank",rel:"noopener noreferrer"},c={href:"https://github.com/wangyoucao577/go-release-action",target:"_blank",rel:"noopener noreferrer"},g={style:{"text-align":"center"}},k={href:"https://go.dev/VERSION?m=text",target:"_blank",rel:"noopener noreferrer"},y={style:{"text-align":"center"}},m={href:"https://github.com/gobuffalo/packr/tree/master/v2",target:"_blank",rel:"noopener noreferrer"};function x(v,t){const s=r("ExternalLinkIcon");return i(),u("div",null,[t[41]||(t[41]=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),e(" 前言")],-1)),n("p",null,[t[1]||(t[1]=e("最近 ChatGPT 大火，随之一起火起来的，有一大批基于 ChatGPT 编写的工具，我的项目 ")),n("a",d,[t[0]||(t[0]=e("chatgpt-dingtalk")),l(s)]),t[2]||(t[2]=e(" 也是这批项目中的一个，旨在提供在钉钉群聊中与 ChatGPT 交互的能力。"))]),t[42]||(t[42]=n("p",null,"这是一个工具类的项目，已经提供了 docker 一键部署的能力。但是也有人只想通过二进制直接部署的方式进行体验，多平台兼容的二进制构建，早已有成熟的 Actions 支持，本文就来介绍一个实现方案。",-1)),t[43]||(t[43]=n("h2",{id:"配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#配置","aria-hidden":"true"},"#"),e(" 配置")],-1)),n("p",null,[t[4]||(t[4]=e("所用 Actions：")),n("a",c,[t[3]||(t[3]=e("go-release-action")),l(s)])]),t[44]||(t[44]=a(`<p>使用配置其实非常简单，基本上阅读完官方介绍文档就可以上手使用了。</p><p>我们在 workflows 目录下添加如下内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>$ cat go<span class="token punctuation">-</span>binary<span class="token punctuation">-</span>release.yml

<span class="token key atrule">name</span><span class="token punctuation">:</span> build<span class="token punctuation">-</span>go<span class="token punctuation">-</span>binary

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">release</span><span class="token punctuation">:</span>
    <span class="token key atrule">types</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>created<span class="token punctuation">]</span> <span class="token comment"># 表示在创建新的 Release 时触发</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build-go-binary</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>
      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>
        <span class="token key atrule">goos</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>linux<span class="token punctuation">,</span> windows<span class="token punctuation">,</span> darwin<span class="token punctuation">]</span> <span class="token comment"># 需要打包的系统</span>
        <span class="token key atrule">goarch</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>amd64<span class="token punctuation">,</span> arm64<span class="token punctuation">]</span> <span class="token comment"># 需要打包的架构</span>
        <span class="token key atrule">exclude</span><span class="token punctuation">:</span> <span class="token comment"># 排除某些平台和架构</span>
          <span class="token punctuation">-</span> <span class="token key atrule">goarch</span><span class="token punctuation">:</span> arm64
            <span class="token key atrule">goos</span><span class="token punctuation">:</span> windows
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> wangyoucao577/go<span class="token punctuation">-</span>release<span class="token punctuation">-</span>action@v1.30
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># 一个默认的变量，用来实现往 Release 中添加文件</span>
          <span class="token key atrule">goos</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> matrix.goos <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">goarch</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> matrix.goarch <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">goversion</span><span class="token punctuation">:</span> <span class="token number">1.18</span> <span class="token comment"># 可以指定编译使用的 Golang 版本</span>
          <span class="token key atrule">binary_name</span><span class="token punctuation">:</span> <span class="token string">&quot;chatgpt-dingtalk&quot;</span> <span class="token comment"># 可以指定二进制文件的名称</span>
          <span class="token key atrule">extra_files</span><span class="token punctuation">:</span> README.md config.dev.json <span class="token comment"># 需要包含的额外文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置好之后，我们可以来到 release 页面，点击 <code>Darft a new release</code> 创建完一个 release 之后，这个 Actions 就会自动运行，将不同环境不同架构下的二进制打好了。</p><p>效果如下：</p><p><img src="http://t.eryajf.net/imgs/2022/12/1d8e1511fa8befa5.png" alt=""></p><h2 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h2><p>如上 yaml 文件中用到的参数基本上都已经有了注释，这里再对官方目前提供的所有参数做个注释说明：</p><p>::: v-pre</p>`,9)),n("table",null,[t[40]||(t[40]=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"参数名"),n("th",{style:{"text-align":"center"}},[n("strong",null,"必填")]),n("th",{style:{"text-align":"center"}},"说明")])],-1)),n("tbody",null,[t[19]||(t[19]=n("tr",null,[n("td",{style:{"text-align":"center"}},"github_token"),n("td",{style:{"text-align":"center"}},[n("strong",null,"是")]),n("td",{style:{"text-align":"center"}},[e("你的 "),n("code",null,"GITHUB_TOKEN"),e(" 用于将版本上传到 Github Release。")])],-1)),t[20]||(t[20]=n("tr",null,[n("td",{style:{"text-align":"center"}},"goos"),n("td",{style:{"text-align":"center"}},[n("strong",null,"是")]),n("td",{style:{"text-align":"center"}},[n("code",null,"GOOS"),e(" 是运行程序的操作系统：darwin、windows、linux 等。")])],-1)),t[21]||(t[21]=n("tr",null,[n("td",{style:{"text-align":"center"}},"goarch"),n("td",{style:{"text-align":"center"}},[n("strong",null,"是")]),n("td",{style:{"text-align":"center"}},[n("code",null,"GOARCH"),e(" 是运行程序的架构：386、amd64、arm、arm64、s390x、loong64 等。")])],-1)),t[22]||(t[22]=n("tr",null,[n("td",{style:{"text-align":"center"}},"goamd64"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[n("code",null,"GOAMD64"),e(" 是正在运行的程序 amd64 微架构级别，从 1.18 开始可用。它只能在 GOARCH 是 amd64 时使用：v1、v2、v3、v4 之一。")])],-1)),n("tr",null,[t[10]||(t[10]=n("td",{style:{"text-align":"center"}},"goversion",-1)),t[11]||(t[11]=n("td",{style:{"text-align":"center"}},[n("strong",null,"否")],-1)),n("td",g,[t[6]||(t[6]=e("Go 编译环境版本。 ")),t[7]||(t[7]=n("code",null,"latest",-1)),t[8]||(t[8]=e(" (")),n("a",k,[t[5]||(t[5]=e("check it here")),l(s)]),t[9]||(t[9]=a(") 是默认的, 可自定义选项有： <code>1.13</code>, <code>1.14</code>, <code>1.15</code>, <code>1.16</code>, <code>1.17</code>, <code>1.18</code>, <code>1.19</code>.",15))])]),t[23]||(t[23]=n("tr",null,[n("td",{style:{"text-align":"center"}},"project_path"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[e("在哪里运行 "),n("code",null,"go build"),e(" 命令。")])],-1)),t[24]||(t[24]=n("tr",null,[n("td",{style:{"text-align":"center"}},"binary_name"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},"如果不想使用仓库名称作为二进制名字，请指定另一个二进制名称。如果未设置，请使用存储库的基本名称。")],-1)),t[25]||(t[25]=n("tr",null,[n("td",{style:{"text-align":"center"}},"pre_command"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},"在构建之前将执行的额外命令。如果您不使用 Go 模块，您可能需要使用它来解决依赖性问题。")],-1)),n("tr",null,[t[17]||(t[17]=n("td",{style:{"text-align":"center"}},"build_command",-1)),t[18]||(t[18]=n("td",{style:{"text-align":"center"}},[n("strong",null,"否")],-1)),n("td",y,[t[13]||(t[13]=e("构建二进制文件的实际命令，通常用 ")),t[14]||(t[14]=n("code",null,"go build",-1)),t[15]||(t[15]=e(". 您可能希望使用其他命令包装器, e.g., ")),n("a",m,[t[12]||(t[12]=e("packr2")),l(s)]),t[16]||(t[16]=a(", example <code>build_command: &#39;packr2 build&#39;</code>. 记得用 <code>pre_command</code> 设置 <code>packr2</code> 命令. 它还支持 <code>make</code> (<code>Makefile</code>) 构建方案, example <code>build_command: make</code>. 在这种情况下两者都是 <code>build_flags</code> and <code>ldflags</code> 将被忽略，因为它们应该写在你的 <code>Makefile</code> . 此外，请确保生成的二进制文件放在 Make 运行的路径中, i.e., <code>project_path</code>.",21))])]),t[26]||(t[26]=n("tr",null,[n("td",{style:{"text-align":"center"}},"executable_compression"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},"用一些第三方工具压缩可执行的二进制文件。它接受带有否参数的压缩命令作为输入，例如 UPX 或 UPX-V。目前只支持 UPX。")],-1)),t[27]||(t[27]=n("tr",null,[n("td",{style:{"text-align":"center"}},"build_flags"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[e("传递给 "),n("code",null,"go build"),e(" 命令的其他参数。")])],-1)),t[28]||(t[28]=n("tr",null,[n("td",{style:{"text-align":"center"}},"ldflags"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[e("要提供给 "),n("code",null,"-ldflags"),e(" 标志参数的值。")])],-1)),t[29]||(t[29]=n("tr",null,[n("td",{style:{"text-align":"center"}},"extra_files"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[e("指定将额外的文件打包的制品内。用空间分隔的多个文件。支持拷贝文件夹，因为内部执行的是 "),n("code",null,"cp -r"),e(". E.g., "),n("code",null,"extra_files: LICENSE README.md")])],-1)),t[30]||(t[30]=n("tr",null,[n("td",{style:{"text-align":"center"}},"md5sum"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[e("与工件一起发布 "),n("code",null,".md5"),e("，默认为 TRUE。")])],-1)),t[31]||(t[31]=n("tr",null,[n("td",{style:{"text-align":"center"}},"sha256sum"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[e("与工件一起发布 "),n("code",null,".sha256"),e(" ，默认为 FALSE。")])],-1)),t[32]||(t[32]=n("tr",null,[n("td",{style:{"text-align":"center"}},"release_tag"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[e("将二进制文件发布到的目标版本标签。它致力于在每次推送时将二进制文件发布到一个指定的发布页面，因为在这种情况下没有目标。如果像大多数人一样，通过 "),n("code",null,"release：[created]"),e(" 事件触发动作，不要设置它。")])],-1)),t[33]||(t[33]=n("tr",null,[n("td",{style:{"text-align":"center"}},"release_name"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[e("替代 "),n("code",null,"release_tag"),e(" 用于发布目标规范和二进制推送. 给定 "),n("code",null,"release_name"),e(" 的最新版本将从所有版本中选择。对例如无标签 (草稿) 的有用。")])],-1)),t[34]||(t[34]=n("tr",null,[n("td",{style:{"text-align":"center"}},"overwrite"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},"如果资产已经存在，则覆盖它。默认为 FALSE。")],-1)),t[35]||(t[35]=n("tr",null,[n("td",{style:{"text-align":"center"}},"asset_name"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[e("如果不想使用默认格式，请自定义资产名称 "),n("code",null,"${BINARY_NAME}-${RELEASE_TAG}-${GOOS}-${GOARCH}"),e(". 确保正确设置它，特别是对于必须附加的矩阵用法 "),n("code",null,"-${{ matrix.goos }}-${{ matrix.goarch }}"),e(". 一个有效的例子可能是 "),n("code",null,"asset_name: binary-name-${{ matrix.goos }}-${{ matrix.goarch }}"),e(".")])],-1)),t[36]||(t[36]=n("tr",null,[n("td",{style:{"text-align":"center"}},"retry"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},"如果上传失败，重试多少次。默认为 3。")],-1)),t[37]||(t[37]=n("tr",null,[n("td",{style:{"text-align":"center"}},"post_command"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},"将为拆解工作执行的额外命令。例如，您可以使用它将工件上传到 AWS s3 或阿里云 OSS")],-1)),t[38]||(t[38]=n("tr",null,[n("td",{style:{"text-align":"center"}},"compress_assets"),n("td",{style:{"text-align":"center"}},[n("strong",null,"否")]),n("td",{style:{"text-align":"center"}},[n("code",null,"auto"),e(" 默认将产生一个 "),n("code",null,"zip"),e(" 文件于 Windows 系统以及 "),n("code",null,"tar.gz"),e(" 文件于其他. "),n("code",null,"zip"),e(" 将强制使用 "),n("code",null,"zip"),e(". "),n("code",null,"OFF"),e(" 将禁用资产打包.")])],-1)),t[39]||(t[39]=n("tr",null,[n("td",{style:{"text-align":"center"}},":::"),n("td",{style:{"text-align":"center"}}),n("td",{style:{"text-align":"center"}})],-1))])]),t[45]||(t[45]=n("h2",{id:"遗留问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#遗留问题","aria-hidden":"true"},"#"),e(" 遗留问题")],-1)),t[46]||(t[46]=n("p",null,"如果单个项目，同时配置了自动生成 release 和当前这个构建二进制的 Action，会发现发布 release 之后没有触发构建，这个问题目前还没有找到比较好的解决办法。",-1))])}const f=o(p,[["render",x],["__file","12-Automatically-build-binary-to-release-of-go-project.html.vue"]]);export{f as default};
